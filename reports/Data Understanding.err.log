Traceback (most recent call last):
  File "/workspaces/PSD/.venv/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
RuntimeError: no running event loop

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/workspaces/PSD/.venv/lib/python3.12/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/workspaces/PSD/.venv/lib/python3.12/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/workspaces/PSD/.venv/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/asyncio/base_events.py", line 687, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/workspaces/PSD/.venv/lib/python3.12/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/workspaces/PSD/.venv/lib/python3.12/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/workspaces/PSD/.venv/lib/python3.12/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.neighbors import LocalOutlierFactor
from sklearn.ensemble import IsolationForest
from sklearn.covariance import EllipticEnvelope

# Prepare data
X = df.drop(['species','species_name'], axis=1).values

# === Local Outlier Factor (LOF) ===
print("\n=== Deteksi Outlier dengan LOF ===")
lof = LocalOutlierFactor(n_neighbors=20, contamination=0.1)
lof_labels = lof.fit_predict(X)  # -1 untuk outlier, 1 untuk inlier
lof_scores = -lof.negative_outlier_factor_
print("Jumlah outlier:", sum(lof_labels == -1))

# === Isolation Forest ===
print("\n=== Deteksi Outlier dengan Isolation Forest ===")
iso = IsolationForest(contamination=0.1, random_state=42)
iso_labels = iso.fit_predict(X)
iso_scores = -iso.score_samples(X)
print("Jumlah outlier:", sum(iso_labels == -1))

# === Robust Covariance ===
print("\n=== Deteksi Outlier dengan Robust Covariance ===")
ee = EllipticEnvelope(contamination=0.1, random_state=42)
ee_labels = ee.fit_predict(X)
ee_scores = -ee.score_samples(X)
print("Jumlah outlier:", sum(ee_labels == -1))

# === Visualisasi Scores ===
plt.figure(figsize=(15, 5))

# Plot LOF
plt.subplot(131)
plt.scatter(range(len(lof_scores)), lof_scores, c=lof_labels, cmap='viridis')
plt.title('LOF Outlier Detection')
plt.ylabel('Anomaly Score')
plt.xlabel('Data Points')

# Plot Isolation Forest
plt.subplot(132)
plt.scatter(range(len(iso_scores)), iso_scores, c=iso_labels, cmap='viridis')
plt.title('Isolation Forest Detection')
plt.ylabel('Anomaly Score')
plt.xlabel('Data Points')

# Plot Robust Covariance
plt.subplot(133)
plt.scatter(range(len(ee_scores)), ee_scores, c=ee_labels, cmap='viridis')
plt.title('Robust Covariance Detection')
plt.ylabel('Anomaly Score')
plt.xlabel('Data Points')

plt.tight_layout()
plt.show()

# === Visualisasi dalam Feature Space ===
plt.figure(figsize=(15, 5))

# Plot untuk sepal features (using LOF results)
plt.subplot(131)
sc = plt.scatter(df['sepal_length'], df['sepal_width'], 
           c=lof_labels, cmap='viridis')
plt.title('Outliers in Sepal Features (LOF)')
plt.xlabel('Sepal Length')
plt.ylabel('Sepal Width')
plt.colorbar(sc)

# Plot untuk petal features
plt.subplot(132)
sc = plt.scatter(df['petal_length'], df['petal_width'], 
           c=lof_labels, cmap='viridis')
plt.title('Outliers in Petal Features (LOF)')
plt.xlabel('Petal Length')
plt.ylabel('Petal Width')
plt.colorbar(sc)

# Plot untuk scatter matrix of features
plt.subplot(133)
feature_cols = ['sepal_length', 'sepal_width', 'petal_length', 'petal_width']
outlier_colors = np.where(lof_labels == -1, 'red', 'blue')
plt.scatter(X[:, 0], X[:, 1], c=outlier_colors, alpha=0.5)
plt.title('Sepal Features with Outliers')
plt.xlabel('Sepal Length')
plt.ylabel('Sepal Width')

plt.tight_layout()
plt.show()

# === Additional Visualization ===
plt.figure(figsize=(12, 4))

# Plot scatter matrix for petal features
plt.subplot(121)
plt.scatter(df['petal_length'], df['petal_width'], 
           c=lof_labels, cmap='viridis', alpha=0.6)
plt.title('Petal Features with Outliers')
plt.xlabel('Petal Length')
plt.ylabel('Petal Width')
plt.colorbar(label='Outlier Status')

# Plot histogram of anomaly scores
plt.subplot(122)
plt.hist(lof_scores, bins=30, color='skyblue', edgecolor='black')
plt.title('Distribution of Anomaly Scores')
plt.xlabel('Anomaly Score')
plt.ylabel('Frequency')

plt.tight_layout()
plt.show()

# === Perbandingan Hasil ===
comparison_df = pd.DataFrame({
    'LOF': lof_labels == -1,
    'Isolation Forest': iso_labels == -1,
    'Robust Covariance': ee_labels == -1
})

print("\n=== Perbandingan Hasil Deteksi Outlier ===")
print("\nJumlah outlier yang terdeteksi oleh masing-masing model:")
print(comparison_df.sum())

print("\nJumlah data yang terdeteksi sebagai outlier oleh semua model:")
print(comparison_df.all(axis=1).sum())

print("\nJumlah data yang terdeteksi sebagai outlier oleh minimal 2 model:")
print((comparison_df.sum(axis=1) >= 2).sum())

# Print details of points detected as outliers by all methods
all_outliers = comparison_df.all(axis=1)
if all_outliers.any():
    print("\nData points detected as outliers by all methods:")
    outlier_details = df[all_outliers]
    print(outlier_details)
------------------

----- stdout -----

=== Deteksi Outlier dengan LOF ===
Jumlah outlier: 15

=== Deteksi Outlier dengan Isolation Forest ===
Jumlah outlier: 15

=== Deteksi Outlier dengan Robust Covariance ===
Jumlah outlier: 15
------------------

[31m---------------------------------------------------------------------------[39m
[31mKeyError[39m                                  Traceback (most recent call last)
[36mFile [39m[32m/workspaces/PSD/.venv/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812[39m, in [36mIndex.get_loc[39m[34m(self, key)[39m
[32m   3811[39m [38;5;28;01mtry[39;00m:
[32m-> [39m[32m3812[39m     [38;5;28;01mreturn[39;00m [38;5;28;43mself[39;49m[43m.[49m[43m_engine[49m[43m.[49m[43mget_loc[49m[43m([49m[43mcasted_key[49m[43m)[49m
[32m   3813[39m [38;5;28;01mexcept[39;00m [38;5;167;01mKeyError[39;00m [38;5;28;01mas[39;00m err:

[36mFile [39m[32mpandas/_libs/index.pyx:167[39m, in [36mpandas._libs.index.IndexEngine.get_loc[39m[34m()[39m

[36mFile [39m[32mpandas/_libs/index.pyx:196[39m, in [36mpandas._libs.index.IndexEngine.get_loc[39m[34m()[39m

[36mFile [39m[32mpandas/_libs/hashtable_class_helper.pxi:7088[39m, in [36mpandas._libs.hashtable.PyObjectHashTable.get_item[39m[34m()[39m

[36mFile [39m[32mpandas/_libs/hashtable_class_helper.pxi:7096[39m, in [36mpandas._libs.hashtable.PyObjectHashTable.get_item[39m[34m()[39m

[31mKeyError[39m: 'sepal_length'

The above exception was the direct cause of the following exception:

[31mKeyError[39m                                  Traceback (most recent call last)
[36mCell[39m[36m [39m[32mIn[12][39m[32m, line 64[39m
[32m     62[39m [38;5;66;03m# Plot untuk sepal features (using LOF results)[39;00m
[32m     63[39m plt.subplot([32m131[39m)
[32m---> [39m[32m64[39m sc = plt.scatter([43mdf[49m[43m[[49m[33;43m'[39;49m[33;43msepal_length[39;49m[33;43m'[39;49m[43m][49m, df[[33m'[39m[33msepal_width[39m[33m'[39m], 
[32m     65[39m            c=lof_labels, cmap=[33m'[39m[33mviridis[39m[33m'[39m)
[32m     66[39m plt.title([33m'[39m[33mOutliers in Sepal Features (LOF)[39m[33m'[39m)
[32m     67[39m plt.xlabel([33m'[39m[33mSepal Length[39m[33m'[39m)

[36mFile [39m[32m/workspaces/PSD/.venv/lib/python3.12/site-packages/pandas/core/frame.py:4107[39m, in [36mDataFrame.__getitem__[39m[34m(self, key)[39m
[32m   4105[39m [38;5;28;01mif[39;00m [38;5;28mself[39m.columns.nlevels > [32m1[39m:
[32m   4106[39m     [38;5;28;01mreturn[39;00m [38;5;28mself[39m._getitem_multilevel(key)
[32m-> [39m[32m4107[39m indexer = [38;5;28;43mself[39;49m[43m.[49m[43mcolumns[49m[43m.[49m[43mget_loc[49m[43m([49m[43mkey[49m[43m)[49m
[32m   4108[39m [38;5;28;01mif[39;00m is_integer(indexer):
[32m   4109[39m     indexer = [indexer]

[36mFile [39m[32m/workspaces/PSD/.venv/lib/python3.12/site-packages/pandas/core/indexes/base.py:3819[39m, in [36mIndex.get_loc[39m[34m(self, key)[39m
[32m   3814[39m     [38;5;28;01mif[39;00m [38;5;28misinstance[39m(casted_key, [38;5;28mslice[39m) [38;5;129;01mor[39;00m (
[32m   3815[39m         [38;5;28misinstance[39m(casted_key, abc.Iterable)
[32m   3816[39m         [38;5;129;01mand[39;00m [38;5;28many[39m([38;5;28misinstance[39m(x, [38;5;28mslice[39m) [38;5;28;01mfor[39;00m x [38;5;129;01min[39;00m casted_key)
[32m   3817[39m     ):
[32m   3818[39m         [38;5;28;01mraise[39;00m InvalidIndexError(key)
[32m-> [39m[32m3819[39m     [38;5;28;01mraise[39;00m [38;5;167;01mKeyError[39;00m(key) [38;5;28;01mfrom[39;00m[38;5;250m [39m[34;01merr[39;00m
[32m   3820[39m [38;5;28;01mexcept[39;00m [38;5;167;01mTypeError[39;00m:
[32m   3821[39m     [38;5;66;03m# If we have a listlike key, _check_indexing_error will raise[39;00m
[32m   3822[39m     [38;5;66;03m#  InvalidIndexError. Otherwise we fall through and re-raise[39;00m
[32m   3823[39m     [38;5;66;03m#  the TypeError.[39;00m
[32m   3824[39m     [38;5;28mself[39m._check_indexing_error(key)

[31mKeyError[39m: 'sepal_length'

